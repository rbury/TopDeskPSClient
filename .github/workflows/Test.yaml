name: Test

env:
  RequiredModules: "InvokeBuild;5.8.1,Pester;5.2.2,BuildHelpers;2.0.16,PSScriptAnalyzer;1.19.1"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  push:
    branches-ignore:
      - master
    paths-ignore:
      - '**/Docs'
      - '**.md'
      - 'LICENSE'
      - '.gitattributes'
      - '.gitignore'

  pull_request:
    types:
      [opened,edited,reopened]
    branches:
      - master
    paths-ignore:
      - '**/Docs'
      - '**.md'
      - 'LICENSE'
      - '.gitattributes'
      - '.gitignore'

jobs:
  test:
    strategy:
      matrix:
        OS: [ubuntu-latest, windows-latest]
    # Push that contains GH_TEST in comment
    if: ( (contains(github.event.commits[0].message, 'GH_TEST')) || (github.event_name == 'pull_request') )
    # Job Name
    name: Build and Test Project
    # Runs On
    runs-on: ${{ matrix.os }}
    steps:

      # Check out repository to host
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set Build Environment variables
      - name: Set Build variables
        run: |
              $Modules = "${{ env.RequiredModules }}" -Split ','
              $Policy = (Get-PSRepository PSGallery).InstallationPolicy
              Set-PSRepository PSGallery -InstallationPolicy Trusted
              $Modules | ForEach-Object {
                $Name = $_.split(';')[0]
                $Version = $_.split(';')[1]
                if ($null -ne (Get-Module -Name $Name -ListAvailable)) {
                  [System.Version]$CurrentVersion = (Get-Module -Name $Name -Listavailable).Version | Sort-Object -Descending | Select-Object -First 1
                }
                else {
                  [System.Version]$CurrentVersion = [System.Version]::new("0.0.0")
                }
                if (($CurrentVersion.Tostring() -ne $Version) -and ($CurrentVersion.ToString() -ne "0.0.0")) {
                  #Install version
                  try {
                    Write-Warning ("Removing {0}`r`nVersion {1}`r`n Looking for {2}" -f $Name,($CurrentVersion.ToString()),$Version)
                    [MIcrosoft.Powershell.Commands.ModuleSpecification]$ModSpec = @{ ModuleName = $Name; RequiredVersion = $CurrentVersion }
                    Remove-Module -FullyQualifiedName $ModSpec -Confirm:$false -ErrorAction SilentlyContinue
                  }
                  catch {
                    $thiserror = $_
                    Write-Warning ("Problem unloading module: {0} `r`n{1}" -f ($thiserror.Exception.Message),($thiserror.ScriptStackTrace))
                  }
                  Install-Module -Name $Name -RequiredVersion $Version -Scope CurrentUser -Repository PSGallery -SkipPublisherCheck -ErrorAction SilentlyContinue -Force
                }
                else {
                  #Install new
                  Install-Module -Name $Name -RequiredVersion $Version -Scope CurrentUser -Repository PSGallery -SkipPublisherCheck -ErrorAction SilentlyContinue -Force
                }
              }
              Set-PSRepository PSGallery -InstallationPolicy $Policy
              $Modules | ForEach-Object { Import-Module -Name $_.split(';')[0] -RequiredVersion $_.split(';')[1] }
              $buildenv = Get-BuildEnvironment
              $buildvars = ($buildenv | Get-Member -MemberType NoteProperty).name
              $buildvars | ForEach-Object {
                $currentvar = $_
                $buildvar = $buildenv.$_
                Write-Output ("currentvar: {0}`r`nvalue:{1}" -f $currentvar,$buildvar)
                echo "${currentvar}=${buildvar}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
                #Write-Output ("{0}={1}" -f $_,($buildenv.$_)) | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
              }
        shell: pwsh

      # Set Release Notes
      - name: Set Release Notes
        run: |
          $rn = ((((Get-Content -Path ./ReleaseNotes.md -Raw) -Replace '## v0.0.0',('## '+$env:PROJECT_VERSION)) -Replace '%','%25') -Replace '\n','%0A') -Replace '\r','%0D'
          Write-Output ("RELEASE_NOTES={0}" -f ($rn)) | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          #Write-Output ("::set-env name=RELEASE_NOTES::{0}" -f ($rn))
        shell: pwsh

      # List env variables
      - name: List Evnironment
        run: Get-item 'env:*'
        shell: pwsh

      # Run Build Task
      - name: Build Project
        run: ./build.ps1 -Task 'testBuild'
        shell: pwsh

      # Run PSScriptAnalyzer
      - name: Analyze Linux
        if: (matrix.os == 'ubuntu-latest')
        # Replace github action - Broken
        #run: |
          #Invoke-ScriptAnalyzer -Path $env:BuildOutput -Settings pssa_settings.psd1 -Recurse -EnableExit -ReportSummary
        #shell: pwsh
        uses: devblackops/github-action-psscriptanalyzer@master
        with:
          rootPath: BuildOutput
          settingsPath: pssa_settings.psd1
          sendComment: true
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          failOnErrors: true
          failOnWarnings: true
          failOnInfos: true

      # Run Tests
      - name: Run Tests
        run: ./build.ps1 -Task 'Test'
        shell: pwsh

      # Upload the action details artifact, this is helpful for exploring data included in triggered event
      - name: Upload Event Details Linux
        # Only need one copy of event
        if: (matrix.os == 'ubuntu-latest')
        uses: actions/upload-artifact@v2
        with:
          name: ActionDetail
          path: ${{ github.event_path }}
