name: CICD

env:
  GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
  RequiredModules: "InvokeBuild;5.6.0,Pester;5.0.1,BuildHelpers;2.0.11"

on:
  push:
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        OS: [ubuntu-latest, windows-latest]
    if: (github.event_name == 'pull_request') || ( (github.event_name == 'push') && (!(contains(github.event.commits[0].message, 'WIP'))) )
    # Job Name
    name: Build and Test Project
    # Runs On
    runs-on: ${{ matrix.os }}
    steps:

      # Check out repository to host
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Set Build Environment variables
      - name: Set Build variables
        run: |
              $Modules = "${{ env.RequiredModules }}" -Split ','
              $Policy = (Get-PSRepository PSGallery).InstallationPolicy
              Set-PSRepository PSGallery -InstallationPolicy Trusted
              $Modules | ForEach-Object {
                $Name = $_.split(';')[0]
                $Version = $_.split(';')[1]
                if ( !( ($null -eq (Get-Module -Name $Name -ListAvailable)) ) ) {
                  if ((Get-Module -Name $Name -ListAvailable).Version.ToString() -ne $Version) {
                    #Install version
                    try {
                      Write-Warning ("Removing {0}`r`nVersion {1}`r`n Looking for {2}" -f $Name,((Get-Module -Name $Name -ListAvailable).Version.ToString()),$Version)
                      [MIcrosoft.Powershell.Commands.ModuleSpecification]$ModSpec = @{ ModuleName = $Name; RequiredVersion = (Get-Module -Name $Name -ListAvailable).Version.ToString() }
                      Remove-Module -FullyQualifiedName $ModSpec -Confirm:$false -ErrorAction SilentlyContinue
                    }
                    catch {
                      $thiserror = $_
                      Write-Warning ("Problem unloading module: {0} `r`n{1}" -f ($thiserror.Exception.Message),($thiserror.ScriptStackTrace))
                    }
                    Install-Module -Name $Name -RequiredVersion $Version -Scope CurrentUser -Repository PSGallery -SkipPublisherCheck -ErrorAction SilentlyContinue -Force
                  }
                }
                else {
                  #Install new
                  Install-Module -Name $Name -RequiredVersion $Version -Scope CurrentUser -Repository PSGallery -SkipPublisherCheck -ErrorAction SilentlyContinue -Force
                }
              }
              Set-PSRepository PSGallery -InstallationPolicy $Policy
              $Modules | ForEach-Object { Import-Module -Name $_.split(';')[0] -RequiredVersion $_.split(';')[1] }
              $buildenv = Get-BuildEnvironment
              $buildvars = ($buildenv | Get-Member -MemberType NoteProperty).name
              $buildvars | ForEach-Object {
                Write-Output ("::set-env name={0}::{1}" -f $_,($buildenv.$_))
              }
        shell: pwsh

      # Compute next Tag, defaults specified for clarity, version types - (major, minor, patch, prerelease, premajor)
      - id: Compute_Tag
        #uses: craig-day/compute-tag@08233c8e763aa357c7930adf553f5b2cd8d29d1b
        uses: ./.github/actions/compute-tag
        with:
          github_token: ${{ secrets.MY_TOKEN }}
          version_scheme: semantic # continuous, semantic
          version_type: prerelease # major, minor, patch, prerelease, premajor
          prerelease_suffix: beta # the suffix added to a prerelease tag, if none already exists.

      # Set Version
      - name: Set Version
        run: echo "::set-env name=PROJECT_VERSION::"${{ steps.compute_tag.outputs.next_tag }}

      # Run Build Task
      - name: Build Project Linux
        if: (matrix.os == 'ubuntu-latest')
        run: ./build.ps1 -Task 'Build'
        shell: pwsh

      - name: Build Project Windows
        if: (matrix.os == 'windows-latest')
        run: ./build.ps1 -Task 'testBuild'

      # Run PSScriptAnalyzer
      - name: Analyze Linux
        if: (matrix.os == 'ubuntu-latest')
        uses: devblackops/github-action-psscriptanalyzer@master
        with:
          rootPath: BuildOutput
          settingsPath: pssa_settings.psd1
          sendComment: true
          repoToken: ${{ secrets.MY_TOKEN }}
          failOnErrors: true
          failOnWarnings: true
          failOnInfos: true

      # Run Tests
      - name: Run Tests Linux
        if: (matrix.os == 'ubuntu-latest')
        run: ./build.ps1 -Task 'Test'
        shell: pwsh

      - name: Run Tests Windows
        if: (matrix.os == 'windows-latest')
        run: ./build.ps1 -Task 'Test'

      # Upload the action details artifact, this is helpful for exploring data included in triggered event
      - name: Upload Event Details Linux
        # Only need one copy of event
        if: (matrix.os == 'ubuntu-latest')
        uses: actions/upload-artifact@v2
        with:
          name: ActionDetail
          path: ${{ github.event_path }}

      # Apply tag to local
      - name: Tag Repo Linux
        if: (matrix.os == 'ubuntu-latest')
        run: git tag ${{ steps.Compute_Tag.outputs.next_tag }}

      # Push tag to remote
      - name: Commit Tag Linux
        if: (matrix.os == 'ubuntu-latest')
        run: git push origin ${{ steps.Compute_Tag.outputs.next_tag }}

      # Create project Zip file
      - name: Create Project Archive Linux
        if: (matrix.os == 'ubuntu-latest')
        run: ./build.ps1 -Task 'Archive'
        shell: pwsh

      # Upload the Zip artifact
      - name: Upload Project Archive Linux
        if: (matrix.os == 'ubuntu-latest')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ProjectName }}
          path: ${{ env.BuildOutput }}/${{ env.ProjectName }}.zip

  release:
      # This job requires that build has run
      needs: build

      name: Create Release
      # Runs On
      runs-on: ubuntu-latest

      steps:

      # Check out repository to host
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

        # Set Build Environment variables
      - name: Set Build variables
        run: |
          $Modules = "${{ env.RequiredModules }}" -Split ','
          $Policy = (Get-PSRepository PSGallery).InstallationPolicy
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          $Modules | ForEach-Object {
            $Name = $_.split(';')[0]
            $Version = $_.split(';')[1]
            if ( !( ($null -eq (Get-Module -Name $Name -ListAvailable)) ) ) {
              if ((Get-Module -Name $Name -ListAvailable).Version.ToString() -ne $Version) {
                #Install version
                try {
                  Write-Warning ("Removing {0}`r`nVersion {1}`r`n Looking for {2}" -f $Name,((Get-Module -Name $Name -ListAvailable).Version.ToString()),$Version)
                  [MIcrosoft.Powershell.Commands.ModuleSpecification]$ModSpec = @{ ModuleName = $Name; RequiredVersion = (Get-Module -Name $Name -ListAvailable).Version.ToString() }
                  Remove-Module -FullyQualifiedName $ModSpec -Confirm:$false -ErrorAction SilentlyContinue
                }
                catch {
                  $thiserror = $_
                  Write-Warning ("Problem unloading module: {0} `r`n{1}" -f ($thiserror.Exception.Message),($thiserror.ScriptStackTrace))
                }
                Install-Module -Name $Name -RequiredVersion $Version -Scope CurrentUser -Repository PSGallery -SkipPublisherCheck -ErrorAction SilentlyContinue -Force
              }
            }
            else {
              #Install new
              Install-Module -Name $Name -RequiredVersion $Version -Scope CurrentUser -Repository PSGallery -SkipPublisherCheck -ErrorAction SilentlyContinue -Force
            }
          }
          Set-PSRepository PSGallery -InstallationPolicy $Policy
          $Modules | ForEach-Object { Import-Module -Name $_.split(';')[0] -RequiredVersion $_.split(';')[1] }
          $buildenv = Get-BuildEnvironment
          $buildvars = ($buildenv | Get-Member -MemberType NoteProperty).name
          $buildvars | ForEach-Object {
            Write-Output ("::set-env name={0}::{1}" -f $_,($buildenv.$_))
          }
        shell: pwsh

      # Download artifact uploaded by build
      - name: Download Archive
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ProjectName }}
          path: ${{ env.BuildOutput }}

      - id: Compute_Tag
        #uses: craig-day/compute-tag@08233c8e763aa357c7930adf553f5b2cd8d29d1b
        uses: ./.github/actions/compute-tag
        with:
          github_token: ${{ secrets.MY_TOKEN }}
          version_scheme: semantic

      # Create a new GitHub release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
        with:
          tag_name: ${{ steps.compute_tag.outputs.previous_tag }}
          release_name: ${{ env.ProjectName }} ${{ steps.compute_tag.outputs.previous_tag }}
          body: >
            Automatic release of ${{ steps.compute_tag.outputs.previous_tag }}
          draft: false
          prerelease: true

      # Upload the downloaded artificat to release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ env.BuildOutput }}/${{ env.ProjectName }}.zip
          asset_name: ${{ env.ProjectName }}
          asset_content_type: application/zip